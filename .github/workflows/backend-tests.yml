name: Backend Tests

on:
  push:
    paths:
      - 'server/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test environment file
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017/test" >> .env
        echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env
        echo "TOKEN_PEPPER=test-token-pepper-for-ci" >> .env
        echo "NODE_ENV=test" >> .env
        echo "EMAIL_SERVICE=" >> .env
        echo "CLOUDINARY_CLOUD_NAME=test-cloud" >> .env
        echo "CLOUDINARY_API_KEY=test-api-key" >> .env
        echo "CLOUDINARY_API_SECRET=test-api-secret" >> .env
    
    - name: Run All Backend Tests
      run: NODE_OPTIONS='--experimental-vm-modules' npx jest tests/ --testPathIgnorePatterns="/e2e/" --silent
    
    - name: Generate Test Coverage
      run: NODE_OPTIONS='--experimental-vm-modules' npx jest --coverage --coverageReporters=lcov --coverageReporters=text-summary
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        directory: ./server
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint (if configured)
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
          npx eslint . --ext .js --format=compact
        else
          echo "No ESLint configuration found, skipping lint check"
        fi
      continue-on-error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Check for known vulnerabilities
      run: npx audit-ci --config audit-ci.json || true

  build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test application startup
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017/test" >> .env
        echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> .env
        echo "TOKEN_PEPPER=test-token-pepper-for-ci" >> .env
        echo "NODE_ENV=test" >> .env
        echo "PORT=3001" >> .env
        timeout 30s npm start || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi