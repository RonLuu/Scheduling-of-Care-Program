name: CI Pipeline

# Trigger the workflow on push to main and feature branches, and on pull requests to main
on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'test/**'
      - 'fix/**'
      - 'refactor/**'
  pull_request:
    branches:
      - main

# Set permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Frontend Tests Job
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20, 22]

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No lint script found, skipping linting"
          fi
        continue-on-error: false

      - name: Run TypeScript check (if applicable)
        run: |
          if [ -f "tsconfig.json" ]; then
            npm run typecheck
          else
            echo "No TypeScript configuration found, skipping typecheck"
          fi
        continue-on-error: false

      - name: Run unit and integration tests
        run: npm test -- --coverage --reporter=verbose
        env:
          CI: true

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 20
        with:
          file: ./client/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          CI: true

      - name: Verify build output
        run: |
          if [ -d "dist" ]; then
            echo "‚úÖ Build successful - dist directory created"
            ls -la dist/
          elif [ -d "build" ]; then
            echo "‚úÖ Build successful - build directory created"
            ls -la build/
          else
            echo "‚ùå Build output directory not found"
            exit 1
          fi

  # Code Quality for PRs
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --reporter=verbose
        env:
          CI: true

      - name: Comment PR with test results
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./client/coverage/lcov.info
          delete-old-comments: true

  # Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [frontend-tests, build]

    steps:
      - name: Check job results
        run: |
          echo "üß™ Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "üèóÔ∏è Build: ${{ needs.build.result }}"

          if [[ "${{ needs.frontend-tests.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed"
            exit 1
          else
            echo "‚úÖ CI Pipeline passed"
          fi

      - name: Create issue on main branch failure
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® CI Pipeline Failed on Main Branch`,
              body: `The CI pipeline failed on the main branch.\n\n**Details:**\n- **Commit**: \`${context.sha.substring(0, 7)}\`\n- **Author**: @${context.actor}\n- **Branch**: ${context.ref}\n- **Workflow**: ${context.workflow}\n\n**Actions:**\n1. Check the [failed workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n2. Review the test failures and build errors\n3. Fix the issues and push a new commit\n\n**Test Summary:**\n- Frontend Tests: ${{ needs.frontend-tests.result }}\n- Build: ${{ needs.build.result }}`,
              labels: ['bug', 'ci-failure', 'priority-high']
            })

      - name: Notify success on main branch
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "üéâ All checks passed on main branch!"
          echo "‚úÖ Frontend tests: ${{ needs.frontend-tests.result }}"
          echo "‚úÖ Build: ${{ needs.build.result }}"

# Workflow-level environment variables
env:
  NODE_ENV: test
  CI: true